

        User question about data: Who are the most efficient couriers according to KPI?

        Relevant DDL statements about tables you need:

        CREATE TABLE copilot2.couriers (
    _id TEXT,
    email TEXT,
    companyid TEXT,
    phone BIGINT,
    createdat TEXT,
    transportid TEXT,
    salary BIGINT,
    fullname TEXT,
    userid TEXT,
    customid BIGINT,
    status TEXT,
    pg_deleted_at DOUBLE PRECISION, -- deletion time (if deleted)
    is_rebox BOOLEAN,
    is_approved BOOLEAN,
    timestamps_createdat DOUBLE PRECISION, -- time when the courier was added to the database
    timestamps_updatedat TEXT -- last update time
);


-- This table is probably the most important one as it captures all needed 
-- information about completed orders/applications, about driver's efficiency
-- and the revenue of company

CREATE TABLE copilot2.applications (
	_id TEXT, 
	addressfromcoords_lat DOUBLE PRECISION, pick-up latitude 
	addressfromcoords_long DOUBLE PRECISION, pick-up longitude
	addressfromdetails DOUBLE PRECISION, pick-up address details
	addresstoaddress TEXT, delivery address
	addresstocoords_lat DOUBLE PRECISION, delivery latitude
	addresstocoords_long DOUBLE PRECISION, delivery longitude
	addresstodetails DOUBLE PRECISION, delivery address details
	apptype TEXT,  type of an application: delivery or pickUp
	client_id TEXT, 
	courier_id TEXT, 
	courierwentdate TEXT, 
	createdusername TEXT, 
	deliveryprice BIGINT, 
	details DOUBLE PRECISION, 
	externalid TEXT, 
	factdeliverydate TEXT, actual delivery time.
	finishedinarea BOOLEAN, 
	generalprice DOUBLE PRECISION, price of an application 
	goodscount BIGINT, 
	typeofdeliver DOUBLE PRECISION, 
	waitinginarea BOOLEAN, 
	loadtime BIGINT, 
	plandeliveryperiodtartdate TEXT, planned start delivery time.
	plandeliveryperiod_enddate TEXT, planned end delivery time
	pricetype TEXT, 
	priority BIGINT, 
	rejectcount BIGINT, number of applications for return/Canceled goods
	requiretransportskill TEXT, 
	routeid TEXT, 
	sender_fullname TEXT, 
	sender_phone TEXT, 
	statusgroup TEXT, status of application, has three values: new, finished and inprocess (users might call them 'active').
	timestamps_createdat TEXT, time, when app was created
	timestamps_updatedat TEXT, time, when app was last updated
	updated TEXT, 
	volume DOUBLE PRECISION, 
	weight DOUBLE PRECISION, 
	waittime BIGINT, 
	waitingstarted TEXT, 
	waitingended TEXT, 
	companyid TEXT, 
	additionaldetails TEXT, 
	customgoodsprice BIGINT, 
	goodsprice DOUBLE PRECISION, 
	haswrongaddress BOOLEAN, 
	index BIGINT, 
	late DOUBLE PRECISION, 
	statusname TEXT, 
	distance_dbl DOUBLE PRECISION, 
	geom DOUBLE PRECISION, 
	addressfrom_address TEXT, 
	courier_note DOUBLE PRECISION, commentary left by courier 
	pg_deleted_at DOUBLE PRECISION, application deletion time (if deleted)
	distancealgoverse DOUBLE PRECISION, 
	plan_options_service_app_type TEXT
)

CREATE TABLE copilot2.transports (
    _id TEXT,
    cartype TEXT,
    ishired DOUBLE PRECISION, -- true or false
    brand TEXT,
    statenumber TEXT,
    maxweight BIGINT, -- lifting capacity
    maxvolume DOUBLE PRECISION, -- volume capacity
    costperdistance DOUBLE PRECISION, -- gasoline cost per km
    companyid TEXT,
    pallet DOUBLE PRECISION,
    createduserid TEXT,
    transportskill TEXT,
    status DOUBLE PRECISION,
    name DOUBLE PRECISION
);


CREATE TABLE copilot2.apporders (
    _id VARCHAR,
    appid VARCHAR, -- id of application
    index VARCHAR, -- the order of application
    success BOOLEAN,
    iscompletedbefore BOOLEAN,
    startdate TIMESTAMP WITHOUT TIME ZONE,
    enddate TIMESTAMP WITHOUT TIME ZONE,
    courierid VARCHAR, -- id of courier
    routeid VARCHAR,
    companyid VARCHAR,
    date TIMESTAMP WITH TIME ZONE,
    distance_dbl DOUBLE PRECISION,
    index_int INTEGER,
    pg_deleted_at TIMESTAMP WITH TIME ZONE,
    timestamps_createdat TIMESTAMP WITH TIME ZONE,
    timestamps_updatedat TIMESTAMP WITH TIME ZONE,
    planned_status BOOLEAN
);


        Relevant SQL examples that work with similar questions:

        -- To answer which driver is most efficient, you need to use our sophisticated formula for driver's KPI.
--     Here's the explanation of formula:
    
--     On-time Rate (50%): Places the highest importance on timely deliveries.
--     Rejection Rate (20%): Emphasizes the importance of reducing rejected deliveries by considering it inversely.
--     Finished-in-Area Rate (20%): Highlights the importance of completing deliveries within the designated area.
--     Within Planned Distance Rate (10%): Encourages adherence to planned routes and distance efficiency.

-- The KPI formula combines these components to give a weighted score that reflects a driver's overall performance, 
-- taking into account timeliness, reliability, effectiveness in specific areas, and route efficiency.
--  This comprehensive approach ensures that drivers are evaluated on multiple critical aspects of their job performance
SELECT 
    couriers.fullname,
    COALESCE(
        0.5 * (CASE WHEN metrics.finished_or_inprocess > 0 THEN metrics.finished_on_time::numeric / metrics.finished_or_inprocess ELSE 0 END) +
        0.3 * (CASE WHEN metrics.finished > 0 THEN metrics.rejected_and_finished::numeric / metrics.finished ELSE 0 END) +
        0.2 * (CASE WHEN metrics.finished > 0 THEN metrics.finished_in_area::numeric / metrics.finished ELSE 0 END), 
        0
    ) AS weighted_score
	FROM (
		SELECT
			courier_id,
			SUM(CASE WHEN statusgroup IN ('finished', 'inprocess') THEN 1 ELSE 0 END) AS finished_or_inprocess,
			SUM(CASE WHEN factdeliverydate <= plandeliveryperiod_enddate AND statusgroup = 'finished' THEN 1 ELSE 0 END) AS finished_on_time,
			SUM(CASE WHEN rejectcount = 0 AND statusgroup = 'finished' THEN 1 ELSE 0 END) AS rejected_and_finished,
			SUM(CASE WHEN finishedinarea = TRUE AND statusgroup = 'finished' THEN 1 ELSE 0 END) AS finished_in_area,
			SUM(CASE WHEN statusgroup = 'finished' THEN 1 ELSE 0 END) AS finished
		FROM
			copilot.applications
		GROUP BY
			courier_id
	) AS metrics
	JOIN copilot2.couriers ON metrics.courier_id = couriers._id
	ORDER BY weighted_score DESC;

Who are the most efficient drivers/couriers according to our KPI?


-- Average courier departure time.
-- To find out average first departure time for drivers,
-- you can stick to this particular SQL query:

SELECT 
    couriers.fullname,
    metrics.average_went_time
	FROM (
		SELECT 
			courier_id,
			TIME '00:00' + (SUM(EXTRACT(EPOCH FROM courierwentdate::timestamp)) / COUNT(*)) * INTERVAL '1 second' AS average_went_time
		FROM 
			applications 
		GROUP BY 
			courier_id
	) AS metrics
	JOIN copilot2.couriers ON metrics.courier_id = couriers._id
	ORDER BY metrics.average_went_time;

What is the average departure time of our couriers/drivers?


SELECT _id, name AS "Филиал" from copilot2.companies;

What deparments do we have in our company?

        Domain knowldedge and hints you might find useful:

        CREATE TABLE copilot2.couriers (
    _id TEXT,
    email TEXT,
    companyid TEXT,
    phone BIGINT,
    createdat TEXT,
    transportid TEXT,
    salary BIGINT,
    fullname TEXT,
    userid TEXT,
    customid BIGINT,
    status TEXT,
    pg_deleted_at DOUBLE PRECISION, -- deletion time (if deleted)
    is_rebox BOOLEAN,
    is_approved BOOLEAN,
    timestamps_createdat DOUBLE PRECISION, -- time when the courier was added to the database
    timestamps_updatedat TEXT -- last update time
);



        Using all the above, generate SQL to answer the question.

        